#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
\usetheme{SK}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation skip
\defskip medskip
\quotes_language german
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Grundlagen: Informationstechnologie in Bibliotheken
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Grundlagen: Informationstechnologie
\end_layout

\end_inset


\end_layout

\begin_layout Author
Sven Koesling
\end_layout

\begin_layout Institute
ETH–Bibliothek
\end_layout

\begin_layout Date
Herbst 2017
\end_layout

\begin_layout Section*
Kursus / Übersicht
\end_layout

\begin_layout Standard
\begin_inset Flex Only
status open

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
article
\end_layout

\end_inset


\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
label=uebersicht
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
\begin_inset Flex Only
status open

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
presentation
\end_layout

\end_inset

Kursus / Übersicht
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Frame

\end_layout

\begin_deeper
\begin_layout Overprint
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
1
\end_layout

\end_inset


\begin_inset Flex Bold
status open

\begin_layout Plain Layout
01.12.2017 : Von Nullen und Einsen
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Vorstellung und Überblick
\end_layout

\begin_layout Itemize
Die Entwicklung des Internets
\end_layout

\begin_layout Itemize
Server: Was ist das eigentlich?
\end_layout

\end_deeper
\begin_layout Overprint
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
2
\end_layout

\end_inset


\begin_inset Flex Bold
status open

\begin_layout Plain Layout
15.12.2017 : Internettechnologien I, Datenbanktechnologien I
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
IntT I: Dokumentformen, Skriptsprachen, Ajax, responsive Web
\end_layout

\begin_layout Itemize
DBT I: Datenbanktypen, Technologien, Einstieg SQL
\end_layout

\end_deeper
\begin_layout Overprint
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
3
\end_layout

\end_inset


\begin_inset Flex Bold
status open

\begin_layout Plain Layout
22.12.2017 : Internettechnologien II: von interaktiven Webseiten zu WebApps
 in der Cloud
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Der Einsatz von JavaScript Frameworks anhand von Primos neuem UI
\end_layout

\end_deeper
\begin_layout Overprint
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
4
\end_layout

\end_inset


\begin_inset Flex Bold
status open

\begin_layout Plain Layout
19.01.2018 : Datenbanktechnologien II: BigData
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Begriffsklärung
\end_layout

\begin_layout Itemize
Anwendungsszenarien, Anwendung in der ETH
\end_layout

\begin_layout Itemize
In Medias Res: BigData am Bsp.
 Logfiles, DataScience am Bsp.
 Benutzerdaten
\end_layout

\end_deeper
\end_deeper
\begin_layout Section*
Von Nullen und Einsen
\end_layout

\begin_layout Subsection*
Einleitung
\end_layout

\begin_layout Standard
Um die Konzepte hinter Cloud und BigData verstehen zu können, braucht es
 ein wenig Grundlagenwissen.
 Das wollen wir im Folgenden — gewürzt mit Abbildungen und Anekdoten, damit
 es nicht zu trocken wird — anhand der Entwicklung des Internets Aufbauen.
 
\end_layout

\begin_layout Standard
Zunächst müssen wir uns mit der Denkweise von Informatikern vertraut machen,
 die für 
\begin_inset Quotes gld
\end_inset

normale
\begin_inset Quotes grd
\end_inset

 Menschen etwas gewöhnungsbedürftig sein kann.
 Computer basieren darauf, dass man in Schaltkreisen den Strom an– bzw.
 abschalten kann.
 Es gibt nur die zwei Zustände 
\begin_inset Quotes gld
\end_inset

AN
\begin_inset Quotes grd
\end_inset

 und 
\begin_inset Quotes gld
\end_inset

AUS
\begin_inset Quotes grd
\end_inset

.
 Mathematisch ist das kein Problem, mit jeder Anzahl von Ziffern >2 lässt
 sich zählen.
 Aber die Wirklichkeit lässt sich nur näherungsweise damit beschreiben.
\end_layout

\begin_layout Standard
Beginnen wir mit einem typischen Informatikerwitz:
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
\begin_inset Flex Only
status open

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
presentation
\end_layout

\end_inset

Von Nullen und Einsen
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Quote
Es gibt 10 Sorten von Menschen: Diejenigen, die das Binärsystem verstehen,
 und die übrigen.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hfill (Autor unbekannt)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
Der Satz macht nur dann Spass, wenn man das Binärsystem kennt und versteht.
 Im täglichen Leben benutzen wir das Dezimalsystem.
 Zum besseren Verständnis nehmen wir an, dass jeder Zahl eine unendliche
 Anzahl von Stellen vorangestellt ist, die den Wert 0 haben.
 Also statt 1 nehmen wir 00000001 an (hier mit sieben Stellen vorneweg,
 weil sich eine unendliche Anzahl so schlecht aufschreiben lässt\SpecialChar ldots
).
\end_layout

\begin_layout Standard
Wir zählen die Ziffern von 0 bis 9 hoch, und wenn die Ziffern aufgebraucht
 sind, erhöhen wir die Stelle davor um eins und setzen die eben hochgezählte
 Ziffer auf 0 zurück.
 So wird die Zahl 9 (00000009), wenn man um eins erhöht, zu 10 (00000010)
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="8">
<features tabularvalignment="middle">
<column alignment="right" valignment="top">
<column alignment="right" valignment="top">
<column alignment="right" valignment="top">
<column alignment="right" valignment="top">
<column alignment="right" valignment="top">
<column alignment="right" valignment="top">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
auf 0 zurücksetzen
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Im Binärsystem stehen uns nur zwei Ziffern zur Verfügung.
 Aber zwei Ziffern reichen zum Zählen.
 Man wendet das gleiche Prinzip an.
 So wird die Zahl 1 (00000001), wenn man um eins erhöht, zu 10 (00000010).
 Jetzt ergibt der Witz einen Sinn.
 Der binäre Wert 10 entspricht in unserem Dezimalsystem dem Wert zwei.
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Die Folge der ersten neun Binärzahlen\SpecialChar ldots

\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\align center
0, 1, 10, 11, 100, 101, 110, 111, 1000 \SpecialChar ldots

\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
\SpecialChar ldots
und die 
\begin_inset Quotes gld
\end_inset

Übersetzung
\begin_inset Quotes grd
\end_inset


\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="2">
<features tabularvalignment="middle">
<column alignment="right" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="right" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
binär
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dezimal
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
101
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
110
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
111
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
Leibniz schreibt Ende des 17.
 Jahrhunderts dazu: 
\end_layout

\begin_layout Quotation
\SpecialChar ldots
deshalb ist der letzte Tag der vollkommenste und der Sabbat, denn an ihm
 ist alles geschaffen und erfüllt, und deshalb schreibt sich die 7 111,
 also ohne Null.
 Und nur wenn man die Zahlen bloß mit 0 und 1 schreibt, erkennt man die
 Vollkommenheit des siebenten Tages.
\end_layout

\begin_layout Standard
Ein Computer kann aktuell
\begin_inset Foot
status open

\begin_layout Plain Layout
Die zur Zeit in Entwicklung befindlichen Quantencomputer kennen auch noch
 
\begin_inset Quotes gld
\end_inset

vielleicht
\begin_inset Quotes grd
\end_inset

.
 Aber obwohl erste Schritte vielversprechend sind, liegen Quantencomputer
 noch in weiter Ferne.
 Und Quantenphysiker denken noch schräger als Informatiker — das möchte
 ich dem geneigten Leser nicht zumuten.
\end_layout

\end_inset

 nur zwei Zustände darstellen: 
\begin_inset Quotes gld
\end_inset

AN
\begin_inset Quotes grd
\end_inset

 und 
\begin_inset Quotes gld
\end_inset

AUS
\begin_inset Quotes grd
\end_inset

.
 Damit ist das Binärsystem für Computer zum Rechnen ideal.
\end_layout

\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Hinweis
\end_layout

\end_inset

Für uns wäre es aus verschiedenen Gründen sehr unpraktisch, im Binärsystem
 zu rechnen.
 Die Zahlen werden z.B.
 sehr schnell sehr lang.
 So braucht die Sieben im Binärsystem schon drei Stellen (111).
\end_layout

\begin_layout Standard
Zahlen können wir also genau umrechnen.
 Aber wie bilden beispielsweise Musik digital ab? 
\end_layout

\begin_layout Standard
Man kann sich mit 
\begin_inset Quotes gld
\end_inset

AN
\begin_inset Quotes grd
\end_inset

 / 
\begin_inset Quotes gld
\end_inset

AUS
\begin_inset Quotes grd
\end_inset

 – Zuständen einer Kurve annähern.
 Zunächst vereinfachen wir das Problem, indem wir statt Musik eine Sinuskurve
 zur Veranschaulichung benutzen.
 Das geht, weil ein Ton eine Summe von Schwingungen ist.
 Sinustöne sind sehr reine Töne, deren Schwingung sehr sauber der Sinuskurve
 entspricht.
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Sinuskurve
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Graphics
	filename pics/sinus-kurve.jpg
	lyxscale 10
	height 100text%

\end_inset


\end_layout

\begin_layout Frame
Sinuskurve, Quelle: 
\begin_inset Formula $\ensuremath{\text{Computer:club}^{2}}$
\end_inset

, Urheber: Rolf Degen
\end_layout

\begin_layout Frame

\end_layout

\begin_layout Standard
Wir wollen mal versuchen, mit unseren zwei Zuständen eine solche Kurve zu
 erzeugen, indem wir sie auf Karos abbilden.
 Nehmen wir an, dass ein Karo dem Zustand 
\begin_inset Quotes gld
\end_inset

AN
\begin_inset Quotes grd
\end_inset

 entspricht, kein Karo dem Zustand 
\begin_inset Quotes gld
\end_inset

AUS
\begin_inset Quotes grd
\end_inset

.
 Wenn man jetzt Karos zu einer Pyramide zusammenstellt und dahinter an der
 Basis genau so eine Pyramide nach unten zeigen lässt, erhält man eine Annäherun
g an eine Sinuskurve.
 Die Abbildung der Kurve sähe dann etwa aus wie folgt.
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
\begin_inset Flex Only
status open

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
presentation
\end_layout

\end_inset

grobe Annäherung
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Graphics
	filename pics/grobe-karos.JPG
	lyxscale 10
	height 100theight%

\end_inset


\end_layout

\begin_layout Standard
Je mehr Informationen bzw.
 
\begin_inset Quotes gld
\end_inset

AN
\begin_inset Quotes grd
\end_inset

 / 
\begin_inset Quotes gld
\end_inset

AUS
\begin_inset Quotes grd
\end_inset

 – Zustände wir nun verwenden, desto feiner wird die Annäherung an die Kurve:
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
feinere Annäherung
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Graphics
	filename pics/feine-karos.JPG
	lyxscale 10

\end_inset


\end_layout

\begin_layout Standard
Wenn man mal von meinen mangelnden Zeichenkünsten absieht, kommt das Ganze
 der Kurve schon näher.
 Da unser Auge wie unser Ohr ein begrenzt feines Messinstrument ist, brauchen
 wir das Karo–Muster nur klein genug zu machen (oder weit genug vom Augen
 zu entfernen) und können die Treppenstufen der Karos nicht mehr sehen bzw.
 hören.
 Mit 
\begin_inset Quotes gld
\end_inset

AN
\begin_inset Quotes grd
\end_inset

 / 
\begin_inset Quotes gld
\end_inset

AUS
\begin_inset Quotes grd
\end_inset

 – Zuständen lässt sich also die Wirklichkeit näherungsweise beschreiben.
\end_layout

\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Hinweis
\end_layout

\end_inset

Egal, wie leistungsfähig Computersysteme sind, oder noch sein werden, sie
 werden immer nur eine Annäherung bieten können.
\end_layout

\begin_layout Standard
Glücklicherweise ist unser Ohr als Messinstrument so unsensibel, dass wir
 die Näherungen nicht mehr vom Original unterscheiden können, solange sie
 nur fein genug sind.
 So konnte Ende der siebziger Jahre die Firma Philipps der digitalen Musikproduk
tion und –wiedergabe mit der Einführung des CD-Spielers kräftigen Schwung
 geben.
\end_layout

\begin_layout Standard
Mit Bildern verhält sich das ähnlich:
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Graphics
	filename pics/sw.png
	lyxscale 10
	height 100theight%

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Ein Bild mit wenig Informationen (und kaum Speicherplatzbedarf: 123kb)
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Graphics
	filename pics/grau.png
	lyxscale 10
	height 100theight%

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Ein Bild mit etwas mehr Informationen (und etwas mehr Speicherplatzbedarf:
 551kb)
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Graphics
	filename pics/farbe.png
	lyxscale 10
	height 100theight%

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Ein Bild mit vielen Informationen (und noch mehr Speicherplatzbedarf: 1,1
 MB)
\end_layout

\end_deeper
\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Je mehr, desto besser
\end_layout

\end_inset


\end_layout

\begin_layout Frame
Je mehr 
\begin_inset Quotes gld
\end_inset

an
\begin_inset Quotes grd
\end_inset

 / 
\begin_inset Quotes gld
\end_inset

aus
\begin_inset Quotes grd
\end_inset

 Informationen wir einsetzen, desto näher ist das Ergebnis an der Wirklichkeit.
 Entsprechend steigen aber auch die benötigte Rechenleistung und der Speicherpla
tzbedarf an.
 
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
Das sind nun relativ kleine Beispielbilder gewesen.
 Rohbilder moderner Kameras benötigen aktuell 25 MB pro Bild, im semiprofessione
llen Bereich das Doppelte, und im Mittelformat braucht es pro Bild ca.
 600MB.
 Deshalb rechnet man mit speziellen Algorithmen 
\begin_inset Quotes gld
\end_inset

nicht benötigte
\begin_inset Quotes grd
\end_inset

 Informationen aus den Daten heraus.
 Auch wenn der Leistungszuwachs von Computern aussergewöhnlich ist, stehen
 Speicher und Rechenpower nicht unbegrenzt zur Verfügung und sollten ganz
 normal als Ressource wahrgenommen werden, die man nicht verschwendet.
 
\end_layout

\begin_layout Standard
Übrigens: Zeitungspapier hält 10–50 Jahre, ein USB-Stick nur 3–10 Jahre.
 Für digitale Daten sind ausgeklügelte Backup-Systeme dringend notwendig!
\end_layout

\begin_layout Subsection*
Die Entwicklung der Internets
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename pics/internet.jpg
	width 60text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Das Internet heute; Quelle: Wikipedia, Urheber: The Opte Project
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
\begin_inset Flex Only
status open

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
presentation
\end_layout

\end_inset

Die Entwicklung des Internets
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Meilensteine
\end_layout

\begin_layout Itemize
ARPA
\end_layout

\begin_layout Itemize
E-Mail
\end_layout

\begin_layout Itemize
www — ein neuer Treiber
\end_layout

\begin_layout Itemize
Web Apps, Cloud Services und intelligente Kühlschränke
\end_layout

\end_deeper
\begin_layout Subsubsection*
Der Vorläufer des Internets: Das Arpanet
\end_layout

\begin_layout Standard
\begin_inset Flex Only
status open

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
article
\end_layout

\end_inset

Das Internet ist 1969 aus einer Zusammenarbeit des US–Verteidigungsministeriums
 und verschiedenen Forschungseinrichtungen entstanden.
 Obwohl sich das Gerücht hält, dass im kalten Krieg eine Technik aufgebaut
 werden sollte, die im Falle eines Atomschlages die Kommunikationsinfrastruktur
 erhalten kann, dürfte ein ausschlaggebender Grund für die Entwicklung die
 bessere Ausnutzung teurer Rechenkapazitäten gewesen sein.
 So entstand als Vorläufer des heutigen Internets das Arpanet.
 So oder so — die Idee ist genial: Man teilt Kommunikation in kleine Päckchen
 auf und entwickelt Protokolle, die es ermöglichen, dass sich diese Päckchen
 ihren Weg selbständig vom Sender zum Empfänger suchen.
 Dabei gibt es nicht nur eine Leitung von A nach B, sondern ein fein verzweigtes
 Netzwerk mit unzähligen Knoten.
 Wenn nun eine Leitung blockiert ist, nimmt das Päckchen einfach einen anderen
 Weg.
 Übertragen wurden damals übrigens noch keine Webseiten mit Bildern.
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
E–Mail
\end_layout

\begin_layout Standard
\begin_inset Flex Only
status open

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
article
\end_layout

\end_inset

Beim Aufbau des Arpanet ging es um Kommunikation von Maschinen.
 Die Initiatoren konnten sich nicht vorstellen, dass der Austausch von Botschaft
en irgendeine Rolle in einem Netzwerk von wissenschaftlichen Computern spielen
 könnte.
 Aber schon Anfang der siebziger Jahre gab es Techniken, Nachrichten über
 das Netz auszutauschen, indem man dem Benutzernamen des Adressaten ein
 @ und den Namen des Computers anfügte.
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
www : am CERN wird Internet--Geschichte geschrieben
\end_layout

\begin_layout Standard
\begin_inset Flex Only
status open

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
article
\end_layout

\end_inset

Das CERN spielt eine wichtige Rolle bei der Entwicklung des Internets, wie
 wir es heute kennen.
 Die Laboratorien des CERN liegen teilweise auf schweizer Gebiet, teilweise
 auf französischem.
 Natürlich setzt jedes Land seine eigenen Systeme ein, was es damals unmöglich
 machte, Texte online auszutauschen.
 Mitte der achtziger Jahre nahm sich ein britischer Physiker und Informatiker
 namens Tim Berners–Lee dieses Problems an und entwickelt mit seinem Kollegen
 Robert Cailliau ein Konzept für ein weltweites Hypertext–Projekt, das sie
 1990 veröffentlichen.
 Das daraus entstehende Protokoll 
\begin_inset Quotes gld
\end_inset

http
\begin_inset Quotes grd
\end_inset

 und die Auszeichnungsprache 
\begin_inset Quotes gld
\end_inset

html
\begin_inset Quotes grd
\end_inset

 sind auch heute noch die Grundlagen des 
\begin_inset Flex Bold
status open

\begin_layout Plain Layout
W
\end_layout

\end_inset

orld 
\begin_inset Flex Bold
status open

\begin_layout Plain Layout
W
\end_layout

\end_inset

ide 
\begin_inset Flex Bold
status open

\begin_layout Plain Layout
W
\end_layout

\end_inset

eb.
 Dabei geht es darum Texte über das Netzwerk zur Verfügung stellen zu können.
 Die Problematik, Texte universell für verschiedenste System darstellbar
 zu übertragen, wird auch heute noch deutlich, wenn man z.B.
 eine Webseite auf einem Smartphone öffnet, die für den Desktop optimiert
 ist.
 Inzwischen sind die Texte um Bilder 
\begin_inset Quotes gld
\end_inset

bereichert
\begin_inset Quotes grd
\end_inset

, Filme werden über das Internet gestreamt und Weltkarten in 3D betrachtet.
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Das Internet der Dinge
\end_layout

\begin_layout Standard
\begin_inset Flex Only
status open

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
article
\end_layout

\end_inset

Da man nun immer mehr Leistung in immer kleinere Chips packen kann, können
 kleinste Dinge Funktionen bekommen, für die man früher ganze Rechenzentren
 benötigte.
 Wecker zeigen das Wetter an, Kalender berechnen die Wegzeit automatisch
 in Alarme mit ein, Navigationssysteme verwenden aktuelle und zu erwartende
 Verkehrsdaten, um die optimale Route zu bestimmen.
 Für all das benötigen die Dinge eine Verbindung zum Internet.
 Das wirft verschiedene Probleme auf: Sicherheit und Datenschutz sind ein
 Thema.
 Aber auch technisch braucht es neue Ansätze.
 So muss jeder, der an ihn gerichtete Informationen bekommen will, eindeutig
 identifizierbar sein.
 Die ursprünglich für diesen Zweck gemachte Adressierung (IPv4) hat für
 das Internet der Dinge viel zu wenig Adressen.
 Eine neue Technik zur Adressierung ist vorhanden, setzt sich aber nur langsam
 durch.
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Server — was ist das eigentlich?
\end_layout

\begin_layout Frame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
\begin_inset Flex Only
status open

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
presentation
\end_layout

\end_inset

Server — was ist das eigentlich?
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Hardware
\end_layout

\begin_layout Itemize
Virtualisierung
\end_layout

\begin_layout Itemize
Software
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Subsection*
Hardware
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename pics/MacMiniServer.jpg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
MacMini Server; Quelle: Gizmodo India
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Frame

\end_layout

\begin_layout Standard
\begin_inset Flex Only
status open

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
article
\end_layout

\end_inset

Was ist ein Server? Im Grunde genommen ist jedes Gerät, das Dienstleistungen
 zur Verfügung stellt, ein Server.
 Wenn ich von meinem lokalen PC eine Webseite bereit stelle, die jemand
 anderes von seinem PC aufruft, ist mein PC in dem Moment ein Server.
 Ursprünglich war Rechenleistung so teuer, dass es nur einen riesigen Rechner
 in einem gut gekühlten Keller gab.
 Terminals ohne eigene Rechenkapazität stellten für eine Anzahl von Nutzern
 eine Verbindung zu diesem Rechner her, dessen Leistung unter allen Nutzern
 aufgeteilt wurde.
 Irgendwann wurde die Technik so billig, dass mit dem Aufkommen der Personal
 Computers jeder seinen eigenen Rechner auf seinem Schreibtisch hatte.
 Das Moorsche Gesetz besagt dass sich die Rechenleistung alle (je nach Quelle)
 ein bis zwei Jahre verdoppelt.
 Inzwischen haben wir mehr Leistung in einem Mobiltelefon, als noch vor
 zehn Jahren auf dem Desktop.
 Im Jahr 2000 wurden für den Aufbau einer Datenbank für kurze Texte noch
 40.000 DM für einen Server der Firma SUN ausgegeben.
 Der Vorschlag, stattdessen einen Linux–PC für 5.000 DM einzusetzen war revolutio
när\SpecialChar ldots
 und erfolgreich.
 Tatsächlich waren die PCs so leistungsfähig geworden, dass es keinen Grund
 mehr gab, das Achtfache zu investieren.
 Sogar MacMinis wurden schon benutzt, um den kompletten Webauftritt von
 Firmen zu realisieren.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Virtualisierung
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
\begin_inset Flex Only
status open

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
presentation
\end_layout

\end_inset

Virtualisierung
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename pics/Matterhorn.jpg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Photomontage: Jamani Caillet / © EPFL
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newline           
\backslash
hspace{
\backslash
linewidth}http://actu.epfl.ch/news/the-matterhorn-like-you-ve-never-seen-it/
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Only
status open

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
article
\end_layout

\end_inset

Hardware ist so billig — warum sollte man einen PC virtualisieren wollen?
 Seit Microsoft mit seinen Produkten den PC–Markt beherrscht, stellt sich
 für Nicht–Windows–Nutzer das Problem, wie man Word–Dokumente öffnen soll.
 Man glaubt es kaum, aber es gab und gibt immer noch Menschen, die kein
 Word haben; oder es schlicht nicht benutzen wollen.
 Aber auch diese Leute bekommen regelmässig Anhänge mit der berühmten Endung
 
\begin_inset Quotes gld
\end_inset

.docx
\begin_inset Quotes grd
\end_inset

.
 Auch gibt es viel Software, die ausschliesslich für Windows geschrieben
 wurde.
 Da seit einiger Zeit ein PC genug Leistung für zwei hat, sind kluge Köpfe
 auf die Idee gekommen, einen PC innerhalb eines PCs zu simulieren.
 Was bedeutet das? Um diese Frage zu klären, müssen wir uns erstmal bewusst
 werden, was ein PC ist.
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
die Komponenten eines PCs
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename pics/pc-komponenten.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
die Komponenten eines PCs
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Only
status open

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
article
\end_layout

\end_inset

Das Herzstück des PCs ist der Prozessor — der eigentliche Rechner.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Only
status open

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
article
\end_layout

\end_inset

Damit man mit ihm kommunizieren kann, gibt es Ein– und Ausgabesysteme.
 Bis in die achtziger Jahre wurden dafür z.B.
 Lochkarten gebraucht, heute benutzen wir im Wesentlichen Tastatur und Maus,
 immer öfter auch den Touchscreen.
 Monitore und Drucker sind Beispiele für Ausgabesysteme.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Only
status open

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
article
\end_layout

\end_inset

Die Daten müssen irgendwo gespeichert werden.
 Auch hierfür taugt die Lochkarte bzw.
 ganze Lochbänder, inzwischen abgelöst durch magnetische Medien, optische
 Datenträger und nichtflüchtige elektronische Speicher.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Only
status open

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
article
\end_layout

\end_inset


\begin_inset Quotes gld
\end_inset

Nichtflüchtig
\begin_inset Quotes grd
\end_inset

 leitet zu einem weiteren Speicher über: Der Prozessor eines PCs ist so
 schnell, dass er einen besonderen, schnellen Zwischenspeicher benötigt,
 von dem er Daten laden und auf dem er seine Ergebnisse ablegen kann.
 Die Rede ist vom RAM, ein schneller elektronischer Speicher, der allerdings
 seine Informationen sofort verliert, wenn der Strom abgeschaltet wird.
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset Flex Only
status open

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
article
\end_layout

\end_inset

Auf den meisten Heim–PCs ist heutzutage nicht mehr der Prozessor (CPU) der
 schnellste im Team.
 Den Titel hat er an den Grafikprozessor (GPU) abgegeben.
 Dazu muss man wissen, dass die Spieleentwicklung einer der Treiber bei
 der technischen Entwicklung von PCs ist.
 Und für Bilder gilt genauso wie für alles Digitalisierte: Je wirklichkeitsgetre
uer die Darstellung sein soll, desto mehr 
\begin_inset Quotes gld
\end_inset

AN
\begin_inset Quotes grd
\end_inset

 / 
\begin_inset Quotes gld
\end_inset

AUS
\begin_inset Quotes grd
\end_inset

 Informationen brauchen wir, und desto leistungsfähiger muss die Hardware
 sein.
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset Flex Only
status open

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
article
\end_layout

\end_inset

Verbunden werden all die Komponenten durch das sogenannte Motherboard.
 Auf ihm sitzt auch ein weiterer kleiner Chip, der beim Einschalten des
 PCs erstmal die Komponenten sortiert und entscheidet, was gestartet werden
 soll.
 Das Problem ist nämlich, dass kein Bauteil vom anderen 
\begin_inset Quotes gld
\end_inset

weiss
\begin_inset Quotes grd
\end_inset

.
 Wir brauchen eine Software, die die Bauteile miteinander verknüpft, das
 Betriebssystem.
 Das Betriebssystem übernimmt vom Chip die Hoheit über den Computer und
 stellt uns unsere Arbeitsumgebung — im Alltag also den Desktop mit Mail–Program
m, Textverarbeitung usw.
 — zur Verfügung.
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset Flex Only
status open

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
article
\end_layout

\end_inset

Der Clou ist, dass man alle diese Komponenten entweder teilen oder komplett
 simulieren kann.
 Wenn ein PC beispielsweise 8GB RAM hat, dann kann man 4GB davon für einen
 virtuellen PC benutzen.
 Unserem PC, unserem Betriebssystem stehen dann nur noch 4GB zur Verfügung,
 die übrigen 4GB 
\begin_inset Quotes gld
\end_inset

gehören
\begin_inset Quotes grd
\end_inset

 der virtuellen Maschine.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Only
status open

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
article
\end_layout

\end_inset

Man startet also seinen PC, meldet sich an und ruft ein Programm auf, das
 per Software nun alle Komponenten eines PCs noch einmal simuliert und diesen
 virtuellen PC startet.
 Eine Festplatte in diesem 
\begin_inset Quotes gld
\end_inset

PC
\begin_inset Quotes grd
\end_inset

 ist dann nur eine grosse Datei auf unserer echten Festplatte.
 Und in diesem virtuellen PC lässt sich dann ein eigenes Betriebssystem
 installieren.
 Auf diesem Weg hat man nun auf einem PC gleichzeitig Windows und Linux
 zur Verfügung.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Only
status open

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
article
\end_layout

\end_inset

Da die Leistungsfähigkeit der Hardware inzwischen so stark gestiegen ist,
 kann man auf einem Computer gleichzeitig mehrere virtuelle PCs starten.
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Vorteile der Virtualisierung
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Da virtuelle Computer nur Dateien auf einer Festplatte sind, kann man sie
 komplett in einem Backup sichern und quasi auf Knopfdruck wieder herstellen.
\end_layout

\begin_layout Itemize
Wenn man für einen Computer kurzfristig mehr Leistung braucht, kann man
 einem virtuellen Computer einfach per Software mehr RAM oder weitere CPUs
 zur Verfügung stellen.
 Das geht teilweise unterbruchsfrei.
\end_layout

\begin_layout Itemize
Computer sind selten ausgelastet.
 Wenn man seinen Bedarf auf virtuelle Maschinen verteilt, ist die Auslastung
 der echten Systeme besser.
\end_layout

\end_deeper
\begin_layout Subsection*
Software
\end_layout

\begin_layout Standard
\begin_inset Flex Only
status open

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
article
\end_layout

\end_inset

Das Wort Server wird synonym auch für die Software benutzt, die dafür zuständig
 ist, Services zu erbringen.
 Wenn wir von einem Webserver sprechen, kann sowohl die (virtuelle) Maschine
 gemeint sein, die die Webseiten ausliefert, als auch die Software auf der
 Maschine, die diese Arbeit übernimmt.
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Beispiele für Software–Server
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Webserver
\end_layout

\begin_layout Itemize
Mailserver
\end_layout

\begin_layout Itemize
Dateiserver
\end_layout

\begin_layout Itemize
Datenbankserver
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Flex Only
status open

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
article
\end_layout

\end_inset

Immer übernimmt eine entsprechende Software die Aufgabe, Daten auszuliefern
 bzw.
 zu empfangen.
 Auf einem Hardwareserver können mehrere Softwareserver laufen, auch wenn
 es im Zuge der Virtualisierung sinnvoll erscheint, für jeden Serverzweck
 eine eigene virtuelle Maschine zu Verfügung zu stellen.
 So läuft in der ETH--Bibliothek z.B.
 das Bibliothekssystem auf einem Server, die Datenbank auf einem anderen.
\end_layout

\end_inset


\end_layout

\end_body
\end_document
